import requests
import json
import time
from typing import Optional, Dict, Any
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Flask —Å–µ—Ä–≤–µ—Ä–∞ MT5
MT5_SERVER_CONFIG = {
    'base_url': 'http://10.211.55.3:5000',  # IP Windows –º–∞—à–∏–Ω—ã
    'timeout': 10,
    'retry_attempts': 3,
    'retry_delay': 1
}

print(f"[DEBUG] MT5_SERVER_CONFIG –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {MT5_SERVER_CONFIG}")

class MT5OrderError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ MT5"""
    pass

def send_order(
    symbol: str, 
    volume: float, 
    order_type: str, 
    price: Optional[float] = None,
    sl: Optional[float] = None,
    tp: Optional[float] = None,
    comment: str = "Cursor Bot"
) -> Dict[str, Any]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ä–¥–µ—Ä –≤ MT5 —á–µ—Ä–µ–∑ Flask —Å–µ—Ä–≤–µ—Ä
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "EURUSD", "XAUUSD")
        volume: –û–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1)
        order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ ("buy", "sell", "buy_limit", "sell_limit", "buy_stop", "sell_stop")
        price: –¶–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        sl: Stop Loss
        tp: Take Profit
        comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ä–¥–µ—Ä—É
    
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        
    Raises:
        MT5OrderError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
    """
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not symbol or not isinstance(symbol, str):
        raise MT5OrderError("–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª")
    
    if not volume or volume <= 0:
        raise MT5OrderError("–ù–µ–≤–µ—Ä–Ω—ã–π –æ–±—ä–µ–º")
    
    if order_type not in ["buy", "sell", "buy_limit", "sell_limit", "buy_stop", "sell_stop"]:
        raise MT5OrderError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞: {order_type}")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    order_data = {
        "symbol": symbol.upper(),
        "volume": float(volume),
        "order_type": order_type,
        "comment": comment
    }
    
    if price is not None:
        order_data["price"] = float(price)
    if sl is not None:
        order_data["sl"] = float(sl)
    if tp is not None:
        order_data["tp"] = float(tp)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    for attempt in range(MT5_SERVER_CONFIG['retry_attempts']):
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {order_data}")
            
            response = requests.post(
                f"{MT5_SERVER_CONFIG['base_url']}/send_order",
                json=order_data,
                timeout=MT5_SERVER_CONFIG['timeout']
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {result}")
                return result
            else:
                error_msg = f"HTTP {response.status_code}: {response.text}"
                logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error_msg}")
                raise MT5OrderError(error_msg)
                
        except requests.exceptions.ConnectionError:
            error_msg = f"–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É: {MT5_SERVER_CONFIG['base_url']}"
            logger.error(error_msg)
            if attempt == MT5_SERVER_CONFIG['retry_attempts'] - 1:
                raise MT5OrderError(error_msg)
            time.sleep(MT5_SERVER_CONFIG['retry_delay'])
            
        except requests.exceptions.Timeout:
            error_msg = f"–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É"
            logger.error(error_msg)
            if attempt == MT5_SERVER_CONFIG['retry_attempts'] - 1:
                raise MT5OrderError(error_msg)
            time.sleep(MT5_SERVER_CONFIG['retry_delay'])
            
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            logger.error(error_msg)
            if attempt == MT5_SERVER_CONFIG['retry_attempts'] - 1:
                raise MT5OrderError(error_msg)
            time.sleep(MT5_SERVER_CONFIG['retry_delay'])
    
    raise MT5OrderError("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")

def get_account_info() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ MT5"""
    try:
        response = requests.get(
            f"{MT5_SERVER_CONFIG['base_url']}/account_info",
            timeout=MT5_SERVER_CONFIG['timeout']
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            raise MT5OrderError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {response.text}")
            
    except Exception as e:
        raise MT5OrderError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")

def get_positions() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        response = requests.get(
            f"{MT5_SERVER_CONFIG['base_url']}/positions",
            timeout=MT5_SERVER_CONFIG['timeout']
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            raise MT5OrderError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {response.text}")
            
    except Exception as e:
        raise MT5OrderError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")

def close_position(ticket: int) -> Dict[str, Any]:
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ç–∏–∫–µ—Ç—É"""
    try:
        response = requests.post(
            f"{MT5_SERVER_CONFIG['base_url']}/close_position",
            json={"ticket": ticket},
            timeout=MT5_SERVER_CONFIG['timeout']
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            raise MT5OrderError(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {response.text}")
            
    except Exception as e:
        raise MT5OrderError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")

def modify_position(ticket: int, sl: Optional[float] = None, tp: Optional[float] = None) -> Dict[str, Any]:
    """–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é (SL/TP)"""
    try:
        data = {"ticket": ticket}
        if sl is not None:
            data["sl"] = float(sl)
        if tp is not None:
            data["tp"] = float(tp)
            
        response = requests.post(
            f"{MT5_SERVER_CONFIG['base_url']}/modify_position",
            json=data,
            timeout=MT5_SERVER_CONFIG['timeout']
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            raise MT5OrderError(f"–û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {response.text}")
            
    except Exception as e:
        raise MT5OrderError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É: {str(e)}")

def test_connection() -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É"""
    try:
        response = requests.get(
            f"{MT5_SERVER_CONFIG['base_url']}/health",
            timeout=5
        )
        return response.status_code == 200
    except:
        return False

def update_server_config(new_config: Dict[str, Any]):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞"""
    global MT5_SERVER_CONFIG
    print(f"[DEBUG] update_server_config –≤—ã–∑–≤–∞–Ω —Å: {new_config}")
    print(f"[DEBUG] –°—Ç–µ–∫ –≤—ã–∑–æ–≤–∞:\n{''.join(traceback.format_stack(limit=5))}")
    MT5_SERVER_CONFIG.update(new_config)
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {MT5_SERVER_CONFIG}")

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if test_connection():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        try:
            account_info = get_account_info()
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {account_info.get('balance', 'N/A')}")
        except MT5OrderError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        try:
            result = send_order("EURUSD", 0.01, "buy", comment="Test from Cursor")
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {result}")
        except MT5OrderError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
    else:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É")
        print(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {MT5_SERVER_CONFIG['base_url']}") 