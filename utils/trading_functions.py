import time
import logging
from typing import Dict, Any, Optional
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ send_order
try:
    from utils.cursor_send_order_improved import send_order, test_connection, get_account_info
    CURSOR_MT5_AVAILABLE = True
except ImportError:
    CURSOR_MT5_AVAILABLE = False
    print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è send_order –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def place_trade(symbol: str, volume: float, order_type: str, 
                price: Optional[float] = None, sl: Optional[float] = None, 
                tp: Optional[float] = None, comment: str = "Cursor Bot") -> Dict[str, Any]:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
    
    Args:
        symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, "EURUSD", "XAUUSD")
        volume: –û–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1)
        order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ ("buy", "sell", "buy_limit", "sell_limit", "buy_stop", "sell_stop")
        price: –¶–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
        sl: Stop Loss
        tp: Take Profit
        comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ä–¥–µ—Ä—É
    
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
    """
    
    if not CURSOR_MT5_AVAILABLE:
        return {
            'success': False, 
            'error': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MT5 —á–µ—Ä–µ–∑ Flask –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª cursor_send_order_improved.py'
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É
    if not test_connection():
        return {
            'success': False, 
            'error': '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ Windows VM'
        }
    
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞: {symbol}, –æ–±—ä–µ–º: {volume}, —Ç–∏–ø: {order_type}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ Flask —Å–µ—Ä–≤–µ—Ä
        result = send_order(symbol, volume, order_type, price, sl, tp, comment)
        
        if result.get('success'):
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –∏—Å–ø–æ–ª–Ω–µ–Ω: {result}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
            _log_trade_success(symbol, volume, order_type, result)
            
            return result
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞: {result.get('error')}")
            return result
            
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ä–¥–µ—Ä–∞: {str(e)}"
        logger.error(error_msg)
        return {'success': False, 'error': error_msg}

def _log_trade_success(symbol: str, volume: float, order_type: str, result: Dict[str, Any]):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        account_info = get_account_info()
        
        log_data = {
            'timestamp': datetime.now().isoformat(),
            'symbol': symbol,
            'volume': volume,
            'order_type': order_type,
            'ticket': result.get('ticket'),
            'price': result.get('price'),
            'account_balance': account_info.get('balance') if account_info.get('success') else 'N/A',
            'account_equity': account_info.get('equity') if account_info.get('success') else 'N/A'
        }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–∫–∏: {log_data}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")

def place_multiple_trades(trades_list: list) -> Dict[str, Any]:
    """
    –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    
    Args:
        trades_list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ—Ä–¥–µ—Ä–æ–≤
        [
            {'symbol': 'EURUSD', 'volume': 0.1, 'order_type': 'buy', 'sl': 1.2000, 'tp': 1.2100},
            {'symbol': 'GBPUSD', 'volume': 0.05, 'order_type': 'sell', 'sl': 1.3000, 'tp': 1.2900}
        ]
    
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤
    """
    
    if not CURSOR_MT5_AVAILABLE:
        return {
            'success': False,
            'error': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MT5 —á–µ—Ä–µ–∑ Flask –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        }
    
    results = {
        'success': True,
        'total_orders': len(trades_list),
        'successful_orders': 0,
        'failed_orders': 0,
        'orders': []
    }
    
    for i, trade in enumerate(trades_list):
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ {i+1}/{len(trades_list)}: {trade}")
            
            result = place_trade(
                symbol=trade['symbol'],
                volume=trade['volume'],
                order_type=trade['order_type'],
                price=trade.get('price'),
                sl=trade.get('sl'),
                tp=trade.get('tp'),
                comment=trade.get('comment', f'Batch order {i+1}')
            )
            
            results['orders'].append({
                'order_index': i+1,
                'trade_params': trade,
                'result': result
            })
            
            if result.get('success'):
                results['successful_orders'] += 1
            else:
                results['failed_orders'] += 1
                
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
            time.sleep(1)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞ {i+1}: {e}")
            results['orders'].append({
                'order_index': i+1,
                'trade_params': trade,
                'result': {'success': False, 'error': str(e)}
            })
            results['failed_orders'] += 1
    
    if results['failed_orders'] > 0:
        results['success'] = False
    
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {results['successful_orders']} —É—Å–ø–µ—à–Ω–æ, {results['failed_orders']} –Ω–µ—É–¥–∞—á–Ω–æ")
    return results

def test_mt5_connection() -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É"""
    if not CURSOR_MT5_AVAILABLE:
        return {
            'success': False,
            'error': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MT5 —á–µ—Ä–µ–∑ Flask –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
        }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if test_connection():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account_info = get_account_info()
            
            return {
                'success': True,
                'connection': 'OK',
                'account_info': account_info if account_info.get('success') else None,
                'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
            }
        else:
            return {
                'success': False,
                'error': '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É',
                'message': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ Windows VM'
            }
            
    except Exception as e:
        return {
            'success': False,
            'error': str(e),
            'message': '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
        }

def get_trading_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    return {
        'cursor_mt5_available': CURSOR_MT5_AVAILABLE,
        'connection_test': test_mt5_connection(),
        'timestamp': datetime.now().isoformat()
    }

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5...")
    connection_test = test_mt5_connection()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {connection_test}")
    
    if connection_test['success']:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ä–¥–µ—Ä–∞...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä
        result = place_trade("EURUSD", 0.01, "buy", comment="Test from Cursor")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
        
        # –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        trades = [
            {'symbol': 'EURUSD', 'volume': 0.01, 'order_type': 'buy', 'sl': 1.2000, 'tp': 1.2100},
            {'symbol': 'GBPUSD', 'volume': 0.01, 'order_type': 'sell', 'sl': 1.3000, 'tp': 1.2900}
        ]
        
        batch_result = place_multiple_trades(trades)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {batch_result}")
    else:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5 —Å–µ—Ä–≤–µ—Ä—É")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("1. Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ Windows VM")
        print("2. IP –∞–¥—Ä–µ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ cursor_send_order_improved.py")
        print("3. –°–µ—Ç–µ–≤—ã–µ –ø–æ—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã") 