from PySide6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QGridLayout, QLabel, QPushButton, QFrame, QTextEdit, QCheckBox, QGraphicsDropShadowEffectfrom PySide6.QtGui import QColorfrom PySide6.QtCore import Qtclass AIBotView(QWidget):    def __init__(self, parent=None):        super().__init__(parent)        self._setup_ui()    def _apply_shadow(self, widget):        shadow = QGraphicsDropShadowEffect()        shadow.setBlurRadius(25)        shadow.setXOffset(0)        shadow.setYOffset(5)        shadow.setColor(QColor(0, 0, 0, 100))        widget.setGraphicsEffect(shadow)    def _setup_ui(self):        main_layout = QVBoxLayout(self)        main_layout.setContentsMargins(25, 20, 25, 20)        main_layout.setSpacing(20)                top_layout = QHBoxLayout()        top_layout.setSpacing(20)        top_layout.addWidget(self._create_controls_card())        top_layout.addWidget(self._create_stats_card())        main_layout.addLayout(top_layout)        main_layout.addWidget(self._create_log_card())        main_layout.setStretch(main_layout.count() - 1, 1)    def _create_controls_card(self):        shadow_container = QWidget()        self._apply_shadow(shadow_container)                card = QFrame(shadow_container)        card.setObjectName("InfoCard")        container_layout = QVBoxLayout(shadow_container)        container_layout.setContentsMargins(10, 10, 10, 10)        container_layout.addWidget(card)                layout = QVBoxLayout(card)        layout.addWidget(QLabel("Controls", objectName="CardTitle"))        self.start_stop_button = QPushButton("ü§ñ START SIMULATION")        self.start_stop_button.setObjectName("PrimaryButton")        self.start_stop_button.setEnabled(False)        self._apply_shadow(self.start_stop_button)        layout.addWidget(self.start_stop_button)        self.live_trading_switch = QCheckBox("–†–ï–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø")        self.live_trading_switch.setObjectName("LiveSwitch")        layout.addWidget(self.live_trading_switch)                layout.addStretch()        return shadow_container    def _create_stats_card(self):        shadow_container = QWidget()        self._apply_shadow(shadow_container)                card = QFrame(shadow_container)        card.setObjectName("InfoCard")        container_layout = QVBoxLayout(shadow_container)        container_layout.setContentsMargins(10, 10, 10, 10)        container_layout.addWidget(card)                layout = QGridLayout(card)        layout.setSpacing(10)        layout.addWidget(QLabel("Simulation Statistics", objectName="CardTitle"), 0, 0, 1, 2)                self.balance_label = QLabel("N/A")        self.day_profit_label = QLabel("N/A")        self.day_trades_label = QLabel("N/A")        self.total_profit_label = QLabel("N/A")        self.total_trades_label = QLabel("N/A")                layout.addWidget(QLabel("Simulated Balance:"), 1, 0)        layout.addWidget(self.balance_label, 1, 1)        layout.addWidget(QLabel("Day P/L:"), 2, 0)        layout.addWidget(self.day_profit_label, 2, 1)        layout.addWidget(QLabel("Day Trades:"), 3, 0)        layout.addWidget(self.day_trades_label, 3, 1)        layout.addWidget(QLabel("Total P/L:"), 4, 0)        layout.addWidget(self.total_profit_label, 4, 1)        layout.addWidget(QLabel("Total Trades:"), 5, 0)        layout.addWidget(self.total_trades_label, 5, 1)                return shadow_container    def _create_log_card(self):        shadow_container = QWidget()        self._apply_shadow(shadow_container)                card = QFrame(shadow_container)        card.setObjectName("InfoCard")        container_layout = QVBoxLayout(shadow_container)        container_layout.setContentsMargins(10, 10, 10, 10)        container_layout.addWidget(card)        log_layout = QVBoxLayout(card)        log_layout.addWidget(QLabel("AI Trader Log", objectName="CardTitle"))        self.log_area = QTextEdit()        self.log_area.setReadOnly(True)        self.log_area.setObjectName("LogArea")        log_layout.addWidget(self.log_area)                return shadow_container            def add_log_message(self, message, level="INFO"):        color = {"ERROR": "#ff5555", "SUCCESS": "#50fa7b", "INFO": "#f8f8f2"}.get(level, "#f8f8f2")        self.log_area.append(f'<p style="color:{color}; margin:0;">{message}</p>')    def update_statistics(self, stats_data: dict):        balance = stats_data.get('balance', 0)        day_profit = stats_data.get('day_profit', 0)        self.balance_label.setText(f"{balance:.2f} USD")        self.day_profit_label.setText(f"{day_profit:+.2f} USD")        self.day_trades_label.setText(str(stats_data.get('day_trades', 0)))        self.total_profit_label.setText(f"{stats_data.get('total_profit', 0):+.2f} USD")        self.total_trades_label.setText(str(stats_data.get('total_trades', 0)))        self.day_profit_label.setStyleSheet("color: #50fa7b;" if day_profit >= 0 else "color: #ff5555;")        self.total_profit_label.setStyleSheet("color: #50fa7b;" if stats_data.get('total_profit', 0) >= 0 else "color: #ff5555;")    def repopulate_log(self, log_history: list):        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥ –∏ –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏."""        self.log_area.clear()        for message, level in log_history:            self.add_log_message(message, level)