#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram —Å–µ—Å—Å–∏–∏
"""

import json
import os
import asyncio
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
    config_path = "data/config.json"
    if not os.path.exists(config_path):
        print("‚ùå –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    with open(config_path, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_config(config):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª"""
    config_path = "data/config.json"
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=4, ensure_ascii=False)

async def create_session():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é Telegram —Å–µ—Å—Å–∏—é"""
    config = load_config()
    if not config:
        return False
    
    telegram_config = config.get("telegram", {})
    api_id = telegram_config.get("api_id", "")
    api_hash = telegram_config.get("api_hash", "")
    phone = telegram_config.get("phone", "")
    session_name = telegram_config.get("session_name", "userbot")
    
    if not api_id or not api_hash or not phone:
        print("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ API ID, API Hash –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ config.json!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.startswith('+'):
        phone = '+' + phone
    
    print("üîê –°–æ–∑–¥–∞–Ω–∏–µ Telegram —Å–µ—Å—Å–∏–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    session_path = f"data/{session_name}"
    client = TelegramClient(session_path, int(api_id), api_hash)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
        await client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if not await client.is_user_authorized():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await client.send_code_request(phone)
            print("üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω.")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram: ")
            await client.sign_in(phone, code)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            try:
                me = await client.get_me()
            except SessionPasswordNeededError:
                print("üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!")
                password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ")
                await client.sign_in(password=password)
                me = await client.get_me()
        
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            me = await client.get_me()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if me:
            user_info = f"{me.first_name or ''} {me.last_name or ''}"
            if me.username:
                user_info += f" (@{me.username})"
        else:
            user_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {user_info}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        telegram_config["phone"] = phone
        config["telegram"] = telegram_config
        save_config(config)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")
        return False
    
    finally:
        await client.disconnect()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ Telegram —Å–µ—Å—Å–∏–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("data", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    success = asyncio.run(create_session())
    
    if success:
        print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏!")

if __name__ == "__main__":
    main() 