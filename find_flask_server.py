#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ Flask —Å–µ—Ä–≤–µ—Ä–∞ MT5 –≤ —Å–µ—Ç–∏
"""

import requests
import socket
import threading
import time

def get_local_ip():
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(('8.8.8.8', 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP: {e}")
        return None

def check_flask_server(ip, port=5000):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º IP"""
    url = f"http://{ip}:{port}/health"
    try:
        response = requests.get(url, timeout=2)
        if response.status_code == 200:
            return True, response.text
        else:
            return False, f"Status: {response.status_code}"
    except requests.exceptions.ConnectionError:
        return False, "Connection refused"
    except requests.exceptions.Timeout:
        return False, "Timeout"
    except Exception as e:
        return False, str(e)

def scan_network(base_ip="10.211.55", port=5000):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–µ—Ç—å –≤ –ø–æ–∏—Å–∫–∞—Ö Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ç—å {base_ip}.0/24 –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    
    found_servers = []
    
    def check_ip(ip):
        success, message = check_flask_server(ip, port)
        if success:
            found_servers.append((ip, message))
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Flask —Å–µ—Ä–≤–µ—Ä –Ω–∞ {ip}:{port}")
            print(f"   Response: {message}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    threads = []
    for i in range(1, 255):
        ip = f"{base_ip}.{i}"
        thread = threading.Thread(target=check_ip, args=(ip,))
        threads.append(thread)
        thread.start()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        if len(threads) >= 50:
            for t in threads:
                t.join()
            threads = []
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ—Ç–æ–∫–æ–≤
    for t in threads:
        t.join()
    
    return found_servers

def main():
    print("üöÄ –ü–æ–∏—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ MT5 –≤ —Å–µ—Ç–∏")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP
    local_ip = get_local_ip()
    if local_ip:
        print(f"üìç –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {local_ip}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π IP –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        base_ip = ".".join(local_ip.split(".")[:3])
        print(f"üåê –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ç—å: {base_ip}.0/24")
    else:
        base_ip = "10.211.55"
        print(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–µ—Ç—å: {base_ip}.0/24")
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ç—å
    start_time = time.time()
    found_servers = scan_network(base_ip)
    end_time = time.time()
    
    print(f"\n‚è±Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    if found_servers:
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_servers)} Flask —Å–µ—Ä–≤–µ—Ä–æ–≤:")
        for ip, response in found_servers:
            print(f"   ‚Ä¢ {ip}:5000")
            print(f"     Response: {response}")
        
        print(f"\nüí° –û–±–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ data/config.json:")
        print(f"   {{\"mt5_server\": {{\"url\": \"http://{found_servers[0][0]}:5000\"}}}}")
    else:
        print("\n‚ùå Flask —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ Windows –º–∞—à–∏–Ω–µ")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ—Ä—Ç 5000 –æ—Ç–∫—Ä—ã—Ç")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∞—à–∏–Ω—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏")
        print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ IP –¥–∏–∞–ø–∞–∑–æ–Ω—ã (10.211.55.x)")

if __name__ == "__main__":
    main() 