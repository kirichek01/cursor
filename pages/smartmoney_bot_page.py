import flet as ft

# ----- –ö–û–ù–°–¢–ê–ù–¢–´ -----
BLOCK_BG_COLOR = "#272a44"
TEXT_COLOR = "#ffffff"
SUBTEXT_COLOR = "#a0a3b1"
SUCCESS_COLOR = "#4CAF50"
ERROR_COLOR = "#f44336"
WARNING_COLOR = "#ff9800"

def create_smartmoney_bot_view():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É Smart Money BOT."""
    
    # ----- –°–û–°–¢–û–Ø–ù–ò–ï -----
    sm_status_indicator = ft.Container(
        width=12,
        height=12,
        border_radius=6,
        bgcolor=ERROR_COLOR  # –ö—Ä–∞—Å–Ω—ã–π - –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    )
    sm_status_text = ft.Text("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", color=ERROR_COLOR, size=16, weight=ft.FontWeight.BOLD)
    current_trade = ft.Text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", color=SUBTEXT_COLOR, size=14)
    logs_area = ft.TextField(
        multiline=True,
        read_only=True,
        min_lines=10,
        max_lines=20,
        border_color="transparent",
        bgcolor=BLOCK_BG_COLOR,
        color=TEXT_COLOR,
        text_size=12
    )
    
    # ----- –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò -----
    def update_status(status: str, color: str):
        sm_status_text.value = status
        sm_status_text.color = color
        sm_status_indicator.bgcolor = color
        sm_status_text.update()
        sm_status_indicator.update()
    
    def start_sm_bot(e):
        try:
            update_status("–ê–∫—Ç–∏–≤–µ–Ω", SUCCESS_COLOR)
            add_log("‚óè Smart Money BOT –∑–∞–ø—É—â–µ–Ω")
        except Exception as ex:
            add_log(f"‚óè –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {ex}")
    
    def stop_sm_bot(e):
        try:
            update_status("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", ERROR_COLOR)
            add_log("‚óè Smart Money BOT –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as ex:
            add_log(f"‚óè –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {ex}")
    
    def add_log(message: str):
        import datetime
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        current_logs = logs_area.value or ""
        logs_area.value = f"[{timestamp}] {message}\n{current_logs}"
        logs_area.update()
    
    def start_backtest(e):
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        symbol = symbol_dropdown.value or "EURUSD"
        start_date = start_date_input.value or "2024-01-01"
        end_date = end_date_input.value or "2024-12-31"
        
        add_log(f"üìä –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ {symbol} —Å {start_date} –ø–æ {end_date}...")
        add_log("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ MT5...")
        add_log("üìà –ê–Ω–∞–ª–∏–∑ Order Blocks, BOS, FVG...")
        add_log("üéØ –ü–æ–∏—Å–∫ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞...")
        add_log("üí∞ –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏...")
        add_log("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        add_log("‚óè –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        update_backtest_stats(symbol, start_date, end_date)
    
    def export_candles(e):
        symbol = symbol_dropdown.value or "EURUSD"
        add_log(f"üìà –í—ã–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–µ–π {symbol} –∏–∑ MT5...")
        add_log("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        add_log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É...")
        add_log("‚óè –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    def update_backtest_stats(symbol="EURUSD", start_date="2024-01-01", end_date="2024-12-31"):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        import random
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        total_signals = random.randint(50, 200)
        profitable_trades = int(total_signals * random.uniform(0.4, 0.7))
        losing_trades = total_signals - profitable_trades
        winrate = (profitable_trades / total_signals) * 100 if total_signals > 0 else 0
        
        total_profit = random.randint(500, 3000)
        max_drawdown = -random.randint(100, 800)
        
        backtest_stats.value = f"–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ {symbol} ({start_date} - {end_date})\n–ù–∞–π–¥–µ–Ω–æ {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤"
        backtest_stats.update()
        
        add_log(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤, {winrate:.1f}% –≤–∏–Ω—Ä–µ–π—Ç")
        add_log(f"üí∞ –ü—Ä–∏–±—ã–ª—å: ${total_profit}, –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: ${max_drawdown}")
    
    # ----- –≠–õ–ï–ú–ï–ù–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê -----
    start_button = ft.ElevatedButton(
        "–ó–∞–ø—É—Å—Ç–∏—Ç—å Smart Money",
        bgcolor=SUCCESS_COLOR,
        color="white",
        on_click=start_sm_bot
    )
    
    stop_button = ft.ElevatedButton(
        "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Smart Money",
        bgcolor=ERROR_COLOR,
        color="white",
        on_click=stop_sm_bot
    )
    
    backtest_button = ft.ElevatedButton(
        "–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥",
        bgcolor=WARNING_COLOR,
        color="white",
        on_click=start_backtest
    )
    
    export_button = ft.ElevatedButton(
        "–í—ã–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ—á–∏",
        bgcolor=WARNING_COLOR,
        color="white",
        on_click=export_candles
    )
    
    # ----- –≠–õ–ï–ú–ï–ù–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–û–ú -----
    symbol_dropdown = ft.Dropdown(
        width=120,
        options=[
            ft.dropdown.Option("EURUSD"),
            ft.dropdown.Option("GBPUSD"),
            ft.dropdown.Option("USDJPY"),
            ft.dropdown.Option("XAUUSD"),
            ft.dropdown.Option("USDCAD"),
            ft.dropdown.Option("AUDUSD")
        ],
        value="EURUSD",
        border_color="transparent",
        color=SUBTEXT_COLOR,
        bgcolor=BLOCK_BG_COLOR
    )
    
    start_date_input = ft.TextField(
        value="2024-01-01",
        width=120,
        border_color="transparent",
        bgcolor=BLOCK_BG_COLOR,
        color=TEXT_COLOR,
        text_size=12,
        hint_text="–ì–ì–ì–ì-–ú–ú-–î–î"
    )
    
    end_date_input = ft.TextField(
        value="2024-12-31",
        width=120,
        border_color="transparent",
        bgcolor=BLOCK_BG_COLOR,
        color=TEXT_COLOR,
        text_size=12,
        hint_text="–ì–ì–ì–ì-–ú–ú-–î–î"
    )
    
    backtest_stats = ft.Text("", color=TEXT_COLOR, size=14)
    
    # ----- –ù–ê–°–¢–†–û–ô–ö–ò -----
    settings_container = ft.Container(
        bgcolor=BLOCK_BG_COLOR,
        border_radius=12,
        padding=20,
        content=ft.Column([
            ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Smart Money", color=TEXT_COLOR, size=16, weight=ft.FontWeight.BOLD),
            ft.Divider(color=SUBTEXT_COLOR),
            
            # –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
            ft.Row([
                ft.Text("–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞:", color=SUBTEXT_COLOR, size=14),
                symbol_dropdown
            ]),
            
            # –ü–µ—Ä–∏–æ–¥ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
            ft.Row([
                ft.Text("–ù–∞—á–∞–ª–æ:", color=SUBTEXT_COLOR, size=14),
                start_date_input,
                ft.Container(width=20),
                ft.Text("–ö–æ–Ω–µ—Ü:", color=SUBTEXT_COLOR, size=14),
                end_date_input
            ]),
            
            # –¢–∞–π–º—Ñ—Ä–µ–π–º
            ft.Row([
                ft.Text("–¢–∞–π–º—Ñ—Ä–µ–π–º:", color=SUBTEXT_COLOR, size=14),
                ft.Dropdown(
                    width=120,
                    options=[
                        ft.dropdown.Option("M1"),
                        ft.dropdown.Option("M5"),
                        ft.dropdown.Option("M15"),
                        ft.dropdown.Option("H1"),
                        ft.dropdown.Option("H4"),
                        ft.dropdown.Option("D1")
                    ],
                    value="M15",
                    border_color="transparent",
                    color=SUBTEXT_COLOR,
                    bgcolor=BLOCK_BG_COLOR
                )
            ]),
            
            # Order Block
            ft.Row([
                ft.Text("Order Block:", color=SUBTEXT_COLOR, size=14),
                ft.Switch(value=True, active_color=SUCCESS_COLOR)
            ]),
            
            # BOS
            ft.Row([
                ft.Text("BOS:", color=SUBTEXT_COLOR, size=14),
                ft.Switch(value=True, active_color=SUCCESS_COLOR)
            ]),
            
            # FVG
            ft.Row([
                ft.Text("FVG:", color=SUBTEXT_COLOR, size=14),
                ft.Switch(value=True, active_color=SUCCESS_COLOR)
            ]),
            
            # SL/TP
            ft.Row([
                ft.Text("SL (–ø—É–Ω–∫—Ç—ã):", color=SUBTEXT_COLOR, size=14),
                ft.TextField(
                    value="50",
                    width=80,
                    border_color="transparent",
                    bgcolor=BLOCK_BG_COLOR,
                    color=TEXT_COLOR,
                    text_size=12
                ),
                ft.Container(width=20),
                ft.Text("TP (–ø—É–Ω–∫—Ç—ã):", color=SUBTEXT_COLOR, size=14),
                ft.TextField(
                    value="100",
                    width=80,
                    border_color="transparent",
                    bgcolor=BLOCK_BG_COLOR,
                    color=TEXT_COLOR,
                    text_size=12
                )
            ]),
            
            # Paper Mode
            ft.Row([
                ft.Text("Paper Mode:", color=SUBTEXT_COLOR, size=14),
                ft.Switch(value=True, active_color=SUCCESS_COLOR)
            ]),
            
            # –í—Ö–æ–¥ –ø–æ —Ç—Ä–µ–Ω–¥—É
            ft.Row([
                ft.Text("–í—Ö–æ–¥ –ø–æ —Ç—Ä–µ–Ω–¥—É:", color=SUBTEXT_COLOR, size=14),
                ft.Switch(value=True, active_color=SUCCESS_COLOR)
            ])
        ], spacing=10)
    )
    
    # ----- –°–¢–ê–¢–ò–°–¢–ò–ö–ê -----
    stats_container = ft.Container(
        bgcolor=BLOCK_BG_COLOR,
        border_radius=12,
        padding=20,
        content=ft.Column([
            ft.Text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Smart Money", color=TEXT_COLOR, size=16, weight=ft.FontWeight.BOLD),
            ft.Divider(color=SUBTEXT_COLOR),
            ft.Row([
                ft.Column([
                    ft.Text("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", color=SUBTEXT_COLOR, size=12),
                    ft.Text("156", color=TEXT_COLOR, size=18, weight=ft.FontWeight.BOLD)
                ], expand=True),
                ft.Column([
                    ft.Text("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö", color=SUBTEXT_COLOR, size=12),
                    ft.Text("89", color=SUCCESS_COLOR, size=18, weight=ft.FontWeight.BOLD)
                ], expand=True),
                ft.Column([
                    ft.Text("–£–±—ã—Ç–æ—á–Ω—ã—Ö", color=SUBTEXT_COLOR, size=12),
                    ft.Text("67", color=ERROR_COLOR, size=18, weight=ft.FontWeight.BOLD)
                ], expand=True)
            ], spacing=20),
            ft.Divider(color=SUBTEXT_COLOR),
            ft.Row([
                ft.Column([
                    ft.Text("–í–∏–Ω—Ä–µ–π—Ç", color=SUBTEXT_COLOR, size=12),
                    ft.Text("57.1%", color=TEXT_COLOR, size=18, weight=ft.FontWeight.BOLD)
                ], expand=True),
                ft.Column([
                    ft.Text("–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å", color=SUBTEXT_COLOR, size=12),
                    ft.Text("$1,245", color=SUCCESS_COLOR, size=18, weight=ft.FontWeight.BOLD)
                ], expand=True),
                ft.Column([
                    ft.Text("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", color=SUBTEXT_COLOR, size=12),
                    ft.Text("-$320", color=ERROR_COLOR, size=18, weight=ft.FontWeight.BOLD)
                ], expand=True)
            ], spacing=20)
        ], spacing=10)
    )
    
    # ----- –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê -----
    backtest_results_container = ft.Container(
        bgcolor=BLOCK_BG_COLOR,
        border_radius=12,
        padding=20,
        content=ft.Column([
            ft.Text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞", color=TEXT_COLOR, size=16, weight=ft.FontWeight.BOLD),
            ft.Divider(color=SUBTEXT_COLOR),
            backtest_stats,
            ft.Container(height=10),
            ft.Row([
                ft.Column([
                    ft.Text("–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤", color=SUBTEXT_COLOR, size=12),
                    ft.Text("0", color=TEXT_COLOR, size=18, weight=ft.FontWeight.BOLD)
                ], expand=True),
                ft.Column([
                    ft.Text("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö", color=SUBTEXT_COLOR, size=12),
                    ft.Text("0", color=SUCCESS_COLOR, size=18, weight=ft.FontWeight.BOLD)
                ], expand=True),
                ft.Column([
                    ft.Text("–£–±—ã—Ç–æ—á–Ω—ã—Ö", color=SUBTEXT_COLOR, size=12),
                    ft.Text("0", color=ERROR_COLOR, size=18, weight=ft.FontWeight.BOLD)
                ], expand=True)
            ], spacing=20),
            ft.Divider(color=SUBTEXT_COLOR),
            ft.Row([
                ft.Column([
                    ft.Text("–í–∏–Ω—Ä–µ–π—Ç", color=SUBTEXT_COLOR, size=12),
                    ft.Text("0%", color=TEXT_COLOR, size=18, weight=ft.FontWeight.BOLD)
                ], expand=True),
                ft.Column([
                    ft.Text("–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å", color=SUBTEXT_COLOR, size=12),
                    ft.Text("$0", color=SUCCESS_COLOR, size=18, weight=ft.FontWeight.BOLD)
                ], expand=True),
                ft.Column([
                    ft.Text("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", color=SUBTEXT_COLOR, size=12),
                    ft.Text("$0", color=ERROR_COLOR, size=18, weight=ft.FontWeight.BOLD)
                ], expand=True)
            ], spacing=20)
        ], spacing=10)
    )
    
    # ----- –¢–ï–ö–£–©–ê–Ø –°–î–ï–õ–ö–ê -----
    current_trade_container = ft.Container(
        bgcolor=BLOCK_BG_COLOR,
        border_radius=12,
        padding=20,
        content=ft.Column([
            ft.Text("–¢–µ–∫—É—â–∞—è —Å–¥–µ–ª–∫–∞", color=TEXT_COLOR, size=16, weight=ft.FontWeight.BOLD),
            ft.Divider(color=SUBTEXT_COLOR),
            current_trade,
            ft.Container(height=10),
            ft.Row([
                ft.Text("EURUSD", color=SUBTEXT_COLOR, size=12),
                ft.Container(expand=True),
                ft.Text("BUY", color=SUCCESS_COLOR, size=12, weight=ft.FontWeight.BOLD),
                ft.Container(width=20),
                ft.Text("1.0850", color=TEXT_COLOR, size=12)
            ]),
            ft.Row([
                ft.Text("–û—Ç–∫—Ä—ã—Ç–∞:", color=SUBTEXT_COLOR, size=12),
                ft.Text("14:30:15", color=TEXT_COLOR, size=12),
                ft.Container(expand=True),
                ft.Text("P&L:", color=SUBTEXT_COLOR, size=12),
                ft.Text("+$45.20", color=SUCCESS_COLOR, size=12, weight=ft.FontWeight.BOLD)
            ])
        ], spacing=10)
    )
    
    # ----- –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ -----
    content = ft.Column([
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å
        ft.Row([
            ft.Text("Smart Money BOT", size=24, weight=ft.FontWeight.BOLD, color=TEXT_COLOR),
            ft.Container(expand=True),
            ft.Container(
                content=ft.Row([
                    ft.Text("–°—Ç–∞—Ç—É—Å:", color=SUBTEXT_COLOR, size=14),
                    sm_status_indicator,
                    ft.Container(width=8),
                    sm_status_text
                ], spacing=8),
                padding=ft.padding.only(right=16)
            )
        ]),
        ft.Container(height=24),
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ft.Row([
            start_button,
            ft.Container(width=10),
            stop_button,
            ft.Container(width=20),
            backtest_button
        ]),
        ft.Container(height=10),
        ft.Row([
            export_button
        ]),
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –≤ —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        ft.Container(
            expand=True,
            content=ft.Column([
                ft.Row([
                    # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
                    ft.Column([
                        settings_container,
                        ft.Container(height=20),
                        backtest_results_container
                    ], expand=True),
                    
                    ft.Container(width=20),
                    
                    # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ç–µ–∫—É—â–∞—è —Å–¥–µ–ª–∫–∞ –∏ –ª–æ–≥–∏
                    ft.Column([
                        stats_container,
                        ft.Container(height=20),
                        current_trade_container,
                        ft.Container(height=20),
                        ft.Container(
                            height=300,
                            bgcolor=BLOCK_BG_COLOR,
                            border_radius=12,
                            padding=20,
                            content=ft.Column([
                                ft.Text("–õ–æ–≥–∏ Smart Money", color=TEXT_COLOR, size=16, weight=ft.FontWeight.BOLD),
                                ft.Divider(color=SUBTEXT_COLOR),
                                logs_area
                            ], spacing=10)
                        )
                    ], expand=True)
                ], spacing=0)
            ], scroll=ft.ScrollMode.AUTO)
        )
    ], spacing=0)
    
    return content 