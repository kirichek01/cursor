import flet as ft
import json
import os
import subprocess
import sys

def create_settings_view(settings: dict, logic_manager=None):
    """
    Создает и возвращает view для страницы настроек с полной интеграцией логики ботов.
    """
    
    # Загружаем актуальные настройки из LogicManager
    if logic_manager and hasattr(logic_manager, 'settings') and logic_manager.settings:
        settings = logic_manager.settings
    
    # Определяем режим работы MT5
    mt5_mode = "flask"  # По умолчанию Flask API для macOS
    if logic_manager and logic_manager.mt5:
        mt5_mode = logic_manager.mt5.mode
    
    # ----- ЭЛЕМЕНТЫ УПРАВЛЕНИЯ -----
    
    # Telegram
    api_id_input = ft.TextField(label="Telegram API ID", value=settings.get("telegram", {}).get("api_id", ""), password=True)
    api_hash_input = ft.TextField(label="Telegram API Hash", value=settings.get("telegram", {}).get("api_hash", ""), password=True)
    phone_input = ft.TextField(label="Номер телефона", value=settings.get("telegram", {}).get("phone", ""), hint_text="+79001234567")
    session_file_input = ft.TextField(label="Session File Name", value=settings.get("telegram", {}).get("session_file", "userbot.session"))
    
    # MT5 - Локальный режим (только для Windows)
    mt5_login_input = ft.TextField(label="MT5 Login", value=settings.get("mt5", {}).get("login", ""))
    mt5_password_input = ft.TextField(label="MT5 Password", value=settings.get("mt5", {}).get("password", ""), password=True)
    mt5_server_input = ft.TextField(label="MT5 Server", value=settings.get("mt5", {}).get("server", ""))
    mt5_path_input = ft.TextField(label="MT5 Path (for Windows)", value=settings.get("mt5", {}).get("path", ""))
    
    # MT5 - Flask API режим (для macOS/Linux)
    mt5_flask_url_input = ft.TextField(label="MT5 Server URL", value=settings.get("mt5_server", {}).get("url", "http://10.211.55.3:5000"))
    
    # Переключатель режима MT5
    mt5_mode_switch = ft.Switch(label="Локальный MT5 (Windows)", value=mt5_mode == "local")
    
    # Показываем/скрываем поля в зависимости от режима
    def on_mt5_mode_change(e):
        is_local = mt5_mode_switch.value
        mt5_login_input.visible = is_local
        mt5_password_input.visible = is_local
        mt5_server_input.visible = is_local
        mt5_path_input.visible = is_local
        mt5_flask_url_input.visible = not is_local
        
        # Обновляем страницу
        if hasattr(settings_view, 'page') and settings_view.page:
            settings_view.page.update()
    
    mt5_mode_switch.on_change = on_mt5_mode_change
    
    # Инициализируем видимость полей
    is_local_mode = mt5_mode == "local"
    mt5_login_input.visible = is_local_mode
    mt5_password_input.visible = is_local_mode
    mt5_server_input.visible = is_local_mode
    mt5_path_input.visible = is_local_mode
    mt5_flask_url_input.visible = not is_local_mode

    # GPT
    gpt_key_input = ft.TextField(label="OpenAI API Key", value=settings.get("gpt", {}).get("api_key", ""), password=True)
    
    # Signal Parser
    signal_parser_enabled = ft.Checkbox(label="Enable Signal Parser", value=settings.get("signal_parser", {}).get("enabled", True))
    
    # AI Trader
    ai_trader_enabled = ft.Checkbox(label="Enable AI Trader", value=settings.get("ai_trader", {}).get("enabled", False))
    ai_lot_size = ft.TextField(label="AI Lot Size", value=str(settings.get("ai_trader", {}).get("lot_size", 0.01)))
    ai_live_trading = ft.Checkbox(label="Live Trading", value=settings.get("ai_trader", {}).get("live_trading", False))
    
    # Trading Settings
    trading_lot_size = ft.TextField(label="Default Lot Size", value=str(settings.get("trading", {}).get("lot_size", 0.01)))
    trading_max_risk = ft.TextField(label="Max Risk %", value=str(settings.get("trading", {}).get("max_risk", 2)))
    
    # Breakeven Settings
    breakeven_enabled = ft.Checkbox(label="Enable Breakeven", value=settings.get("breakeven", {}).get("enabled", False))
    breakeven_pips = ft.TextField(label="Breakeven Pips", value=str(settings.get("breakeven", {}).get("pips", 20)))
    
    # Кнопки управления
    save_button = ft.ElevatedButton(text="Сохранить настройки", icon="save")
    refresh_button = ft.ElevatedButton(text="Обновить настройки", icon="refresh", bgcolor="#2196F3")
    test_gpt_button = ft.ElevatedButton(text="Тест GPT", icon="psychology")
    test_mt5_button = ft.ElevatedButton(text="Тест MT5", icon="account_balance")
    create_session_button = ft.ElevatedButton(text="Создать сессию Telegram", icon="telegram", bgcolor="#0088cc", color="white")
    
    # Статусы сервисов
    telegram_status = ft.Text("Telegram: ОФФЛАЙН", color="#ff6a6a", size=12)
    mt5_status = ft.Text("MT5: ОФФЛАЙН", color="#ff6a6a", size=12)
    gpt_status = ft.Text("GPT: ОФФЛАЙН", color="#ff6a6a", size=12)
    db_status = ft.Text("Database: ОФФЛАЙН", color="#ff6a6a", size=12)
    
    # Кнопки управления ботом
    start_bot_button = ft.ElevatedButton(text="Запустить бота", icon="play_arrow", bgcolor="#4CAF50")
    stop_bot_button = ft.ElevatedButton(text="Остановить бота", icon="stop", bgcolor="#f44336")
    start_ai_button = ft.ElevatedButton(text="Запустить AI Trader", icon="smart_toy", bgcolor="#2196F3")
    stop_ai_button = ft.ElevatedButton(text="Остановить AI Trader", icon="smart_toy", bgcolor="#FF9800")
    
    # Статистика
    stats_text = ft.Text("Статистика загружается...", size=14)
    
    # Лог создания сессии
    session_log = ft.Text("", size=12, color="#888888")
    
    # Статус сохранения настроек
    save_status = ft.Text("", size=12, color="#888888")
    
    def refresh_settings():
        """Обновляет поля настроек из базы данных"""
        if logic_manager and hasattr(logic_manager, 'settings') and logic_manager.settings:
            current_settings = logic_manager.settings
            
            # Обновляем Telegram настройки
            telegram_settings = current_settings.get("telegram", {})
            api_id_input.value = telegram_settings.get("api_id", "")
            api_hash_input.value = telegram_settings.get("api_hash", "")
            phone_input.value = telegram_settings.get("phone", "")
            session_file_input.value = telegram_settings.get("session_file", "userbot.session")
            
            # Обновляем GPT настройки
            gpt_settings = current_settings.get("gpt", {})
            gpt_key_input.value = gpt_settings.get("api_key", "")
            
            # Обновляем MT5 настройки
            mt5_settings = current_settings.get("mt5", {})
            mt5_login_input.value = mt5_settings.get("login", "")
            mt5_password_input.value = mt5_settings.get("password", "")
            mt5_server_input.value = mt5_settings.get("server", "")
            mt5_path_input.value = mt5_settings.get("path", "")
            
            mt5_server_settings = current_settings.get("mt5_server", {})
            mt5_flask_url_input.value = mt5_server_settings.get("url", "http://10.211.55.3:5000")
            
            # Обновляем остальные настройки
            signal_parser_settings = current_settings.get("signal_parser", {})
            signal_parser_enabled.value = signal_parser_settings.get("enabled", True)
            
            ai_trader_settings = current_settings.get("ai_trader", {})
            ai_trader_enabled.value = ai_trader_settings.get("enabled", False)
            ai_lot_size.value = str(ai_trader_settings.get("lot_size", 0.01))
            ai_live_trading.value = ai_trader_settings.get("live_trading", False)
            
            trading_settings = current_settings.get("trading", {})
            trading_lot_size.value = str(trading_settings.get("lot_size", 0.01))
            trading_max_risk.value = str(trading_settings.get("max_risk", 2))
            
            breakeven_settings = current_settings.get("breakeven", {})
            breakeven_enabled.value = breakeven_settings.get("enabled", False)
            breakeven_pips.value = str(breakeven_settings.get("pips", 20))
            
            # Обновляем интерфейс
            if hasattr(settings_view, 'page') and settings_view.page:
                settings_view.page.update()
    
    def update_statuses():
        """Обновляет статусы сервисов."""
        if logic_manager:
            status = logic_manager.get_bot_status()
            
            # Обновляем статусы сервисов
            telegram_status.value = f"Telegram: {'ПОДКЛЮЧЕН' if status['services']['telegram'] else 'ОФФЛАЙН'}"
            telegram_status.color = "#4CAF50" if status['services']['telegram'] else "#ff6a6a"
            
            mt5_status.value = f"MT5: {'ПОДКЛЮЧЕН' if status['services']['mt5'] else 'ОФФЛАЙН'}"
            mt5_status.color = "#4CAF50" if status['services']['mt5'] else "#ff6a6a"
            
            gpt_status.value = f"GPT: {'ПОДКЛЮЧЕН' if status['services']['gpt'] else 'ОФФЛАЙН'}"
            gpt_status.color = "#4CAF50" if status['services']['gpt'] else "#ff6a6a"
            
            db_status.value = f"Database: {'ПОДКЛЮЧЕН' if status['services']['database'] else 'ОФФЛАЙН'}"
            db_status.color = "#4CAF50" if status['services']['database'] else "#ff6a6a"
            
            # Обновляем статистику
            stats = status.get('stats', {})
            stats_text.value = f"Сигналов: {stats.get('total_signals', 0)} | Успешных сделок: {stats.get('successful_trades', 0)} | Прибыль: ${stats.get('total_profit', 0):.2f}"
            
            # Обновляем кнопки
            start_bot_button.disabled = status['bot_running']
            stop_bot_button.disabled = not status['bot_running']
            start_ai_button.disabled = not status['bot_running'] or status['ai_trader_running']
            stop_ai_button.disabled = not status['ai_trader_running']
            
            if hasattr(settings_view, 'page') and settings_view.page:
                settings_view.page.update()
    
    # Диалог для создания Telegram сессии
    code_input = ft.TextField(
        label="Код подтверждения",
        hint_text="Введите код из SMS",
        width=200,
        autofocus=True
    )
    
    password_2fa_input = ft.TextField(
        label="Пароль двухфакторной аутентификации",
        hint_text="Если включена 2FA",
        password=True,
        width=200
    )
    
    session_dialog_content = ft.Column([
        ft.Text("Создание Telegram сессии", size=18, weight=ft.FontWeight.BOLD),
        ft.Container(height=10),
        ft.Text("Код подтверждения отправлен на ваш телефон.", size=14),
        ft.Container(height=20),
        code_input,
        ft.Container(height=10),
        password_2fa_input,
        ft.Container(height=20),
        ft.Row([
            ft.ElevatedButton(
                text="Подтвердить",
                bgcolor="#4CAF50",
                color="white",
                on_click=lambda e: confirm_telegram_code(e)
            ),
            ft.ElevatedButton(
                text="Отмена",
                bgcolor="#f44336", 
                color="white",
                on_click=lambda e: close_session_dialog(e)
            )
        ], spacing=10)
    ], spacing=10, width=400)
    
    session_dialog = ft.AlertDialog(
        title=ft.Text("Telegram аутентификация"),
        content=session_dialog_content,
        modal=True
    )
    
    def close_session_dialog(e):
        """Закрывает диалог создания сессии"""
        session_dialog.open = False
        session_log.value = "❌ Создание сессии отменено"
        session_log.color = "#f44336"
        session_log.update()
        if hasattr(settings_view, 'page') and settings_view.page:
            settings_view.page.update()
    
    def confirm_telegram_code(e):
        """Подтверждает код и завершает создание сессии"""
        try:
            code = (code_input.value or "").strip()
            password_2fa = (password_2fa_input.value or "").strip()
            
            if not code:
                session_log.value = "❌ Введите код подтверждения!"
                session_log.color = "#f44336"
                session_log.update()
                return
            
            session_log.value = "🔐 Подтверждение кода..."
            session_log.color = "#2196F3"
            session_log.update()
            
            # Подтверждаем код через LogicManager
            if logic_manager:
                success = logic_manager.confirm_telegram_code(code, password_2fa)
                if success:
                    session_dialog.open = False
                    session_log.value = "✅ Telegram сессия успешно создана!"
                    session_log.color = "#4CAF50"
                    update_statuses()
                else:
                    session_log.value = "❌ Неверный код или ошибка подтверждения"
                    session_log.color = "#f44336"
            else:
                session_log.value = "❌ LogicManager недоступен"
                session_log.color = "#f44336"
            
            session_log.update()
            if hasattr(settings_view, 'page') and settings_view.page:
                settings_view.page.update()
                
        except Exception as ex:
            session_log.value = f"❌ Ошибка: {str(ex)}"
            session_log.color = "#f44336"
            session_log.update()
    
    def on_create_telegram_session(e):
        """Создает новую Telegram сессию через интерактивный диалог."""
        try:
            # Проверяем наличие необходимых данных
            api_id = (api_id_input.value or "").strip()
            api_hash = (api_hash_input.value or "").strip()
            phone = (phone_input.value or "").strip()
            
            if not api_id or not api_hash or not phone:
                session_log.value = "❌ Заполните API ID, API Hash и номер телефона!"
                session_log.color = "#f44336"
                session_log.update()
                return
            
            # Сначала сохраняем настройки
            on_save_settings(None)
            
            session_log.value = "📱 Отправка кода подтверждения..."
            session_log.color = "#2196F3"
            session_log.update()
            
            # Отправляем код через LogicManager
            if logic_manager:
                success = logic_manager.init_telegram_session(api_id, api_hash, phone)
                if success:
                    # Очищаем поля ввода
                    code_input.value = ""
                    password_2fa_input.value = ""
                    
                    # Показываем диалог для ввода кода
                    session_dialog.open = True
                    session_log.value = "📱 Код отправлен! Введите его в появившемся окне."
                    session_log.color = "#4CAF50"
                    
                    if hasattr(settings_view, 'page') and settings_view.page:
                        settings_view.page.overlay.append(session_dialog)
                        settings_view.page.update()
                else:
                    session_log.value = "❌ Ошибка отправки кода. Проверьте API данные."
                    session_log.color = "#f44336"
            else:
                session_log.value = "❌ LogicManager недоступен"
                session_log.color = "#f44336"
            
            session_log.update()
            
        except Exception as e:
            session_log.value = f"❌ Ошибка: {str(e)}"
            session_log.color = "#f44336"
            session_log.update()
    
    def on_save_settings(e):
        """Сохраняет настройки."""
        try:
            save_status.value = "💾 Сохранение настроек..."
            save_status.color = "#2196F3"
            save_status.update()
            
            # Определяем режим MT5
            is_local_mode = mt5_mode_switch.value
            
            new_settings = {
                "telegram": {
                    "api_id": api_id_input.value,
                    "api_hash": api_hash_input.value,
                    "phone": phone_input.value,
                    "session_file": session_file_input.value
                },
                "gpt": {
                    "api_key": gpt_key_input.value
                },
                "signal_parser": {
                    "enabled": signal_parser_enabled.value
                },
                "ai_trader": {
                    "enabled": ai_trader_enabled.value,
                    "lot_size": float(ai_lot_size.value) if ai_lot_size.value else 0.01,
                    "live_trading": ai_live_trading.value
                },
                "trading": {
                    "lot_size": float(trading_lot_size.value) if trading_lot_size.value else 0.01,
                    "max_risk": float(trading_max_risk.value) if trading_max_risk.value else 2
                },
                "breakeven": {
                    "enabled": breakeven_enabled.value,
                    "pips": int(breakeven_pips.value) if breakeven_pips.value else 20
                }
            }
            
            # Добавляем настройки MT5 в зависимости от режима
            if is_local_mode:
                new_settings["mt5"] = {
                    "login": mt5_login_input.value,
                    "password": mt5_password_input.value,
                    "server": mt5_server_input.value,
                    "path": mt5_path_input.value
                }
            else:
                new_settings["mt5_server"] = {
                    "url": mt5_flask_url_input.value
                }
            
            if logic_manager:
                success = logic_manager.update_settings(new_settings)
                if success:
                    save_status.value = "✅ Настройки успешно сохранены!"
                    save_status.color = "#4CAF50"
                    print("Настройки сохранены!")
                    refresh_settings() # Обновляем настройки после сохранения
                else:
                    save_status.value = "❌ Ошибка сохранения настроек"
                    save_status.color = "#f44336"
                    print("Ошибка сохранения настроек!")
            else:
                save_status.value = "❌ LogicManager недоступен"
                save_status.color = "#f44336"
            
            save_status.update()
            update_statuses()
            
        except Exception as e:
            save_status.value = f"❌ Ошибка: {str(e)}"
            save_status.color = "#f44336"
            save_status.update()
            print(f"Error saving settings: {e}")
    
    def on_test_gpt(e):
        """Тестирует GPT API ключ."""
        if logic_manager and gpt_key_input.value:
            success = logic_manager.test_gpt_key(gpt_key_input.value)
            if success:
                gpt_status.value = "GPT: ПОДКЛЮЧЕН"
                gpt_status.color = "#4CAF50"
            else:
                gpt_status.value = "GPT: ОШИБКА"
                gpt_status.color = "#f44336"
            gpt_status.update()
    
    def on_test_mt5(e):
        """Тестирует подключение к MT5."""
        if logic_manager:
            account_info = logic_manager.get_mt5_account_info()
            if account_info:
                mt5_status.value = "MT5: ПОДКЛЮЧЕН"
                mt5_status.color = "#4CAF50"
            else:
                mt5_status.value = "MT5: ОШИБКА"
                mt5_status.color = "#f44336"tatus.update()
    
    def on_start_bot(e):
        """Запускает бота."""
        if logic_manager:
            logic_manager.start_services()
            update_statuses()
    
    def on_stop_bot(e):
        """Останавливает бота."""
        if logic_manager:
            logic_manager.stop_services()
            update_statuses()
    
    def on_start_ai(e):
        """Запускает AI Trader."""
        # Реализация запуска AI Trader
        pass
    
    def on_stop_ai(e):
        """Останавливает AI Trader."""
        # Реализация остановки AI Trader
        pass
    
    # Привязываем обработчики событий
    save_button.on_click = on_save_settings
    refresh_button.on_click = lambda e: refresh_settings()
    test_gpt_button.on_click = on_test_gpt
    test_mt5_button.on_click = on_test_mt5
    create_session_button.on_click = on_create_telegram_session
    start_bot_button.on_click = on_start_bot
    stop_bot_button.on_click = on_stop_bot
    start_ai_button.on_click = on_start_ai
    stop_ai_button.on_click = on_stop_ai
    
    # Инициализируем настройки и статусы при создании
    refresh_settings()
    update_statuses()
    
    # Создаем интерфейс
    settings_view = ft.Container(
        bgcolor="#1a1a1a",
        padding=24,
        content=ft.Column([
            ft.Text("Настройки", size=24, weight=ft.FontWeight.BOLD, color="#ffffff"),
            ft.Container(height=24),
            
            # Секция MT5
            ft.Container(
                bgcolor="#2a2a2a",
                border_radius=12,
                padding=20,
                content=ft.Column([
                    ft.Text("Настройки MetaTrader 5", size=16, weight=ft.FontWeight.BOLD, color="#ffffff"),
                    ft.Container(height=16),
                    mt5_mode_switch,
                    ft.Container(height=12),
                    mt5_login_input,
                    mt5_password_input,
                    mt5_server_input,
                    mt5_path_input,
                    mt5_flask_url_input,
                ], spacing=12)
            ),
            
            ft.Container(height=16),
            
            # Секция Telegram
            ft.Container(
                bgcolor="#2a2a2a",
                border_radius=12,
                padding=20,
                content=ft.Column([
                    ft.Text("Настройки Telegram", size=16, weight=ft.FontWeight.BOLD, color="#ffffff"),
                    ft.Container(height=16),
                    api_id_input,
                    api_hash_input,
                    phone_input,
                    session_file_input,
                    create_session_button,
                    session_log,
                ], spacing=12)
            ),
            
            ft.Container(height=16),
            
            # Секция GPT
            ft.Container(
                bgcolor="#2a2a2a",
                border_radius=12,
                padding=20,
                content=ft.Column([
                    ft.Text("Настройки GPT", size=16, weight=ft.FontWeight.BOLD, color="#ffffff"),
                    ft.Container(height=16),
                    gpt_key_input,
                    test_gpt_button,
                ], spacing=12)
            ),
            
            ft.Container(height=16),
            
            # Секция торговли
            ft.Container(
                bgcolor="#2a2a2a",
                border_radius=12,
                padding=20,
                content=ft.Column([
                    ft.Text("Настройки торговли", size=16, weight=ft.FontWeight.BOLD, color="#ffffff"),
                    ft.Container(height=16),
                    trading_lot_size,
                    trading_max_risk,
                    breakeven_enabled,
                    breakeven_pips,
                ], spacing=12)
            ),
            
            ft.Container(height=16),
            
            # Секция AI Trader
            ft.Container(
                bgcolor="#2a2a2a",
                border_radius=12,
                padding=20,
                content=ft.Column([
                    ft.Text("AI Trader", size=16, weight=ft.FontWeight.BOLD, color="#ffffff"),
                    ft.Container(height=16),
                    ai_trader_enabled,
                    ai_lot_size,
                    ai_live_trading,
                ], spacing=12)
            ),
            
            ft.Container(height=16),
            
            # Секция управления
            ft.Container(
                bgcolor="#2a2a2a",
                border_radius=12,
                padding=20,
                content=ft.Column([
                    ft.Text("Управление", size=16, weight=ft.FontWeight.BOLD, color="#ffffff"),
                    ft.Container(height=16),
                    ft.Row([save_button, refresh_button, test_mt5_button], spacing=12),
                    save_status,
                    ft.Container(height=12),
                    ft.Row([start_bot_button, stop_bot_button], spacing=12),
                    ft.Container(height=12),
                    ft.Row([start_ai_button, stop_ai_button], spacing=12),
                ], spacing=12)
            ),
            
            ft.Container(height=16),
            
            # Секция статусов
            ft.Container(
                bgcolor="#2a2a2a",
                border_radius=12,
                padding=20,
                content=ft.Column([
                    ft.Text("Статус сервисов", size=16, weight=ft.FontWeight.BOLD, color="#ffffff"),
                    ft.Container(height=16),
                    telegram_status,
                    mt5_status,
                    gpt_status,
                    db_status,
                    ft.Container(height=12),
                    stats_text,
                ], spacing=8)
            ),
            
        ], spacing=0, scroll=ft.ScrollMode.AUTO)
    )
    
    return settings_view, [api_id_input, api_hash_input, phone_input, session_file_input,
                          mt5_login_input, mt5_password_input, mt5_server_input, mt5_path_input,
                          mt5_flask_url_input, mt5_mode_switch, gpt_key_input, signal_parser_enabled,
                          ai_trader_enabled, ai_lot_size, ai_live_trading, trading_lot_size,
                          trading_max_risk, breakeven_enabled, breakeven_pips] 