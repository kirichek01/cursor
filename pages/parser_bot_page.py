import flet as ft
from services.logic_manager import LogicManager

# ----- –ö–û–ù–°–¢–ê–ù–¢–´ -----
BLOCK_BG_COLOR = "#272a44"
TEXT_COLOR = "#ffffff"
SUBTEXT_COLOR = "#a0a3b1"
SUCCESS_COLOR = "#4CAF50"
ERROR_COLOR = "#f44336"
WARNING_COLOR = "#ff9800"

def get_parser_stats(logic_manager):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    if not logic_manager or not hasattr(logic_manager, 'database_service'):
        return {
            'processed_signals': '0',
            'successful_trades': '0',
            'cancelled_trades': '0'
        }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã
        signals = logic_manager.database_service.get_signal_history(limit=1000)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_signals = len(signals)
        successful_trades = len([s for s in signals if s['status'] == 'CLOSED'])
        cancelled_trades = len([s for s in signals if s['status'] in ['CANCELLED', 'PARTIALLY_CANCELLED']])
        
        return {
            'processed_signals': str(total_signals),
            'successful_trades': str(successful_trades),
            'cancelled_trades': str(cancelled_trades)
        }
    except Exception as e:
        print(f"Error getting parser stats: {e}")
        return {
            'processed_signals': '0',
            'successful_trades': '0',
            'cancelled_trades': '0'
        }

def create_parser_bot_view(logic_manager: LogicManager):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É Parser BOT —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω–∞–ª–æ–≤."""
    
    # ----- –ü–ï–†–ï–ú–ï–ù–ù–´–ï -----
    parser_status_indicator = ft.Container(
        width=12,
        height=12,
        border_radius=6,
        bgcolor=ERROR_COLOR
    )
    
    parser_status_text = ft.Text("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", color=SUBTEXT_COLOR, size=14)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    real_stats = get_parser_stats(logic_manager)
    processed_signals_text = ft.Text(real_stats['processed_signals'], color=TEXT_COLOR, size=18, weight=ft.FontWeight.BOLD)
    successful_trades_text = ft.Text(real_stats['successful_trades'], color=TEXT_COLOR, size=18, weight=ft.FontWeight.BOLD)
    cancelled_trades_text = ft.Text(real_stats['cancelled_trades'], color=TEXT_COLOR, size=18, weight=ft.FontWeight.BOLD)
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    channels_list = ft.Column(spacing=8)
    
    # –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤
    search_input = ft.TextField(
        label="–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤",
        hint_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞",
        border_color="transparent",
        bgcolor=BLOCK_BG_COLOR,
        color=TEXT_COLOR,
        prefix_icon=ft.Icons.SEARCH
    )
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    search_results = ft.Column(spacing=4, visible=False)
    
    # –õ–æ–≥–∏
    logs_area = ft.TextField(
        multiline=True,
        min_lines=8,
        max_lines=12,
        border_color="transparent",
        bgcolor=BLOCK_BG_COLOR,
        color=TEXT_COLOR,
        read_only=True,
        text_style=ft.TextStyle(font_family="monospace", size=12)
    )
    
    # ----- –§–£–ù–ö–¶–ò–ò -----
    def update_status(status: str, color: str):
        parser_status_text.value = status
        parser_status_indicator.bgcolor = color
        parser_status_text.update()
        parser_status_indicator.update()
    
    def update_stats():
        new_stats = get_parser_stats(logic_manager)
        processed_signals_text.value = new_stats['processed_signals']
        successful_trades_text.value = new_stats['successful_trades']
        cancelled_trades_text.value = new_stats['cancelled_trades']
        processed_signals_text.update()
        successful_trades_text.update()
        cancelled_trades_text.update()
    
    def add_channel(e):
        channel_name = channel_input.value.strip() if channel_input.value else ""
        if channel_name:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–Ω–∞–ª–∞
            channel_card = ft.Container(
                bgcolor=BLOCK_BG_COLOR,
                border_radius=8,
                padding=12,
                content=ft.Row([
                    ft.Icon("telegram", color=SUCCESS_COLOR, size=20),
                    ft.Text(channel_name, color=TEXT_COLOR, size=14, weight=ft.FontWeight.W_500),
                    ft.Container(expand=True),
                    ft.IconButton(
                        icon="delete",
                        icon_color=ERROR_COLOR,
                        icon_size=18,
                        on_click=lambda e, card=channel_card: remove_channel(card)
                    )
                ], spacing=12)
            )
            channels_list.controls.append(channel_card)
            channels_list.update()
            channel_input.value = ""
            channel_input.update()
            add_log(f"‚óè –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {channel_name}")
    
    def search_channels(e):
        query = search_input.value.strip().lower() if search_input.value else ""
        if not query:
            search_results.visible = False
            search_results.update()
            return
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API Telegram)
        mock_channels = [
            "GOLDHUNTER | PAUL ü¶Å FX & CRYPTO üåç",
            "CryptoJuketrade",
            "FX Signals Pro",
            "Trading Master",
            "Forex Signals Daily",
            "Crypto Trading Signals",
            "Gold Trading Pro",
            "EURUSD Signals"
        ]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
        filtered_channels = [ch for ch in mock_channels if query in ch.lower()]
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        search_results.controls.clear()
        
        for channel in filtered_channels:
            channel_item = ft.Container(
                bgcolor=BLOCK_BG_COLOR,
                border_radius=6,
                padding=8,
                content=ft.Row([
                    ft.Icon("telegram", color=SUBTEXT_COLOR, size=16),
                    ft.Text(channel, color=TEXT_COLOR, size=12),
                    ft.Container(expand=True),
                    ft.IconButton(
                        icon="add",
                        icon_color=SUCCESS_COLOR,
                        icon_size=16,
                        on_click=lambda e, ch=channel: add_channel_from_search(ch)
                    )
                ], spacing=8)
            )
            search_results.controls.append(channel_item)
        
        search_results.visible = True
        search_results.update()
    
    def add_channel_from_search(channel_name):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
        existing_channels = [ch.content.controls[1].value for ch in channels_list.controls]
        if channel_name not in existing_channels:
            channel_card = ft.Container(
                bgcolor=BLOCK_BG_COLOR,
                border_radius=8,
                padding=12,
                content=ft.Row([
                    ft.Icon("telegram", color=SUCCESS_COLOR, size=20),
                    ft.Text(channel_name, color=TEXT_COLOR, size=14, weight=ft.FontWeight.W_500),
                    ft.Container(expand=True),
                    ft.IconButton(
                        icon="delete",
                        icon_color=ERROR_COLOR,
                        icon_size=18,
                        on_click=lambda e, card=channel_card: remove_channel(card)
                    )
                ], spacing=12)
            )
            channels_list.controls.append(channel_card)
            channels_list.update()
            add_log(f"‚óè –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª –∏–∑ –ø–æ–∏—Å–∫–∞: {channel_name}")
        
        # –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        search_results.visible = False
        search_results.update()
        search_input.value = ""
        search_input.update()
    
    def remove_channel(channel_card):
        channel_name = channel_card.content.controls[1].value
        channels_list.controls.remove(channel_card)
        channels_list.update()
        add_log(f"‚óè –£–¥–∞–ª–µ–Ω –∫–∞–Ω–∞–ª: {channel_name}")
    
    def start_parser(e):
        try:
            # logic_manager.start_parser_bot()
            update_status("–ê–∫—Ç–∏–≤–µ–Ω", SUCCESS_COLOR)
            add_log("‚óè Parser BOT –∑–∞–ø—É—â–µ–Ω")
            update_stats()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        except Exception as ex:
            add_log(f"‚óè –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {ex}")
    
    def stop_parser(e):
        try:
            # logic_manager.stop_parser_bot()
            update_status("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", ERROR_COLOR)
            add_log("‚óè Parser BOT –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as ex:
            add_log(f"‚óè –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {ex}")
    
    def add_log(message: str):
        import datetime
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        current_logs = logs_area.value or ""
        logs_area.value = f"[{timestamp}] {message}\n{current_logs}"
        logs_area.update()
    
    def train_model(e):
        add_log("üß† –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∫–∞–Ω–∞–ª–∞ GOLDHUNTER
        add_log("üìä –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ GOLDHUNTER:")
        add_log("   ‚Ä¢ –§–æ—Ä–º–∞—Ç: BUY/SELL SYMBOL at PRICE")
        add_log("   ‚Ä¢ SL: –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è")
        add_log("   ‚Ä¢ TP: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ (TP1, TP2, TP3)")
        add_log("   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: —á–µ—Ä–µ–∑ reply —Å–æ–æ–±—â–µ–Ω–∏—è")
        add_log("   ‚Ä¢ Trailing: SL –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –∫ —Ü–µ–Ω–µ")
        add_log("   ‚Ä¢ Break-even: –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä—Å–µ—Ä –ø–æ–¥ –∫–∞–Ω–∞–ª
        add_log("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:")
        add_log("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö TP")
        add_log("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ trailing stop")
        add_log("   ‚úÖ Break-even –ª–æ–≥–∏–∫–∞")
        add_log("   ‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π")
        add_log("   ‚úÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ reply")
        
        add_log("üéØ –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å GOLDHUNTER!")
    
    # ----- –≠–õ–ï–ú–ï–ù–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê -----
    channel_input = ft.TextField(
        label="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
        border_color="transparent",
        bgcolor=BLOCK_BG_COLOR,
        color=TEXT_COLOR
    )
    
    add_channel_button = ft.ElevatedButton(
        "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
        bgcolor=SUCCESS_COLOR,
        color="white",
        on_click=add_channel,
        height=40,
        style=ft.ButtonStyle(
            shape=ft.RoundedRectangleBorder(radius=8)
        )
    )
    
    search_button = ft.ElevatedButton(
        "–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤",
        bgcolor=WARNING_COLOR,
        color="white",
        on_click=search_channels,
        height=40,
        style=ft.ButtonStyle(
            shape=ft.RoundedRectangleBorder(radius=8)
        )
    )
    
    start_button = ft.ElevatedButton(
        "–ó–∞–ø—É—Å—Ç–∏—Ç—å Parser",
        bgcolor=SUCCESS_COLOR,
        color="white",
        on_click=start_parser
    )
    
    stop_button = ft.ElevatedButton(
        "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Parser",
        bgcolor=ERROR_COLOR,
        color="white",
        on_click=stop_parser
    )
    
    train_button = ft.ElevatedButton(
        "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å",
        bgcolor=WARNING_COLOR,
        color="white",
        on_click=train_model
    )
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    refresh_stats_button = ft.IconButton(
        icon="refresh",
        icon_color=SUBTEXT_COLOR,
        on_click=lambda e: update_stats(),
        tooltip="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    )
    
    # ----- –°–¢–ê–¢–ò–°–¢–ò–ö–ê -----
    stats_container = ft.Container(
        bgcolor=BLOCK_BG_COLOR,
        border_radius=12,
        padding=20,
        content=ft.Column([
            ft.Row([
                ft.Text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Parser BOT", color=TEXT_COLOR, size=16, weight=ft.FontWeight.BOLD),
                ft.Container(expand=True),
                refresh_stats_button
            ]),
            ft.Divider(color=SUBTEXT_COLOR),
            ft.Row([
                ft.Column([
                    ft.Text("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤", color=SUBTEXT_COLOR, size=12),
                    processed_signals_text
                ], expand=True),
                ft.Column([
                    ft.Text("–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", color=SUBTEXT_COLOR, size=12),
                    successful_trades_text
                ], expand=True),
                ft.Column([
                    ft.Text("–û—Ç–º–µ–Ω–µ–Ω–æ", color=SUBTEXT_COLOR, size=12),
                    cancelled_trades_text
                ], expand=True)
            ], spacing=20)
        ], spacing=10)
    )
    
    # ----- –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ -----
    content = ft.Column(
        scroll=ft.ScrollMode.ADAPTIVE,
        controls=[
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å
            ft.Row([
                ft.Text("Parser BOT", size=24, weight=ft.FontWeight.BOLD, color=TEXT_COLOR),
                ft.Container(expand=True),
                ft.Container(
                    content=ft.Row([
                        ft.Text("–°—Ç–∞—Ç—É—Å:", color=SUBTEXT_COLOR, size=14),
                        parser_status_indicator,
                        ft.Container(width=8),
                        parser_status_text
                    ], spacing=8),
                    padding=ft.padding.only(right=16)
                )
            ]),
            ft.Container(height=24),
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            ft.Row([
                start_button,
                ft.Container(width=10),
                stop_button,
                ft.Container(width=20),
                train_button
            ]),
            ft.Container(height=24),
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
            ft.Column([
                # –ë–ª–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
                ft.Container(
                    bgcolor=BLOCK_BG_COLOR,
                    border_radius=12,
                    padding=20,
                    content=ft.Column([
                        ft.Text("Telegram –∫–∞–Ω–∞–ª—ã", color=TEXT_COLOR, size=16, weight=ft.FontWeight.BOLD),
                        ft.Divider(color=SUBTEXT_COLOR),
                        
                        # –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤
                        ft.Text("–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤", color=SUBTEXT_COLOR, size=12, weight=ft.FontWeight.W_500),
                        ft.Row([
                            ft.Container(
                                content=search_input,
                                expand=True
                            ),
                            ft.Container(width=10),
                            search_button
                        ], alignment=ft.MainAxisAlignment.START),
                        
                        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                        search_results,
                        
                        ft.Container(height=16),
                        ft.Text("–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", color=SUBTEXT_COLOR, size=12, weight=ft.FontWeight.W_500),
                        ft.Row([
                            ft.Container(
                                content=channel_input,
                                expand=True
                            ),
                            ft.Container(width=10),
                            add_channel_button
                        ], alignment=ft.MainAxisAlignment.START),
                        ft.Container(height=16),
                        ft.Text("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", color=SUBTEXT_COLOR, size=12, weight=ft.FontWeight.W_500),
                        channels_list
                    ], spacing=10)
                ),
                ft.Container(height=20),
                
                # –ë–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
                stats_container,
                ft.Container(height=20),
                # –ë–ª–æ–∫ –ª–æ–≥–æ–≤ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
                ft.Container(
                    bgcolor=BLOCK_BG_COLOR,
                    border_radius=12,
                    padding=20,
                    content=ft.Column([
                        ft.Text("–õ–æ–≥–∏ Parser BOT", color=TEXT_COLOR, size=16, weight=ft.FontWeight.BOLD),
                        ft.Divider(color=SUBTEXT_COLOR),
                        logs_area
                    ], spacing=10)
                )
            ], spacing=0)
        ], spacing=0)
    return content
